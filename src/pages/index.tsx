import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const [phoneNumber, setPhoneNumber] = useState("");
  const [sessionInfo, setSessionInfo] = useState("");
  const [otpCode, setOtpCode] = useState("");
  const [token, setToken] = useState("");
  const [refreshToken, setRefreshToken] = useState("");

  const sendOtpMut = trpc.example.sendOtp.useMutation({
    onSuccess(data, variables, context) {
      setSessionInfo(data["sessionInfo"]);
    },
  });
  const verifyOtpMut = trpc.example.verifyOtp.useMutation({
    onSuccess(data, variables, context) {
      if (data["refreshToken"])
        localStorage.setItem("refreshToken", data["refreshToken"]);
      setToken(data["idToken"]);
      setRefreshToken(data["refreshToken"]);
    },
  });
  const refreshTokenMut = trpc.example.refreshToken.useMutation({
    onSuccess(data, variables, context) {
      if (data["refreshToken"])
        localStorage.setItem("refreshToken", data["refreshToken"]);
      setToken(data["id_token"]);
      setRefreshToken(data["refreshToken"]);
    },
  });

  const memoriesQuery = trpc.example.getMemories.useQuery(
    { token },
    { refetchOnWindowFocus: false }
  );

  useEffect(() => {
    if (!token && !refreshTokenMut.isSuccess && !refreshTokenMut.isLoading) {
      const refreshToken = localStorage.getItem("refreshToken");
      if (refreshToken) {
        refreshTokenMut.mutate({ refreshToken });
      }
    }
  }, [token, refreshTokenMut]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gray-700">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {!sessionInfo && !token && (
            <div className="form-control">
              <label className="label">
                <span className="label-text">
                  Enter your phone number to login
                </span>
              </label>
              <label className="input-group">
                <span>Phone number</span>
                <input
                  type="text"
                  className="input-bordered input"
                  onChange={(e) => {
                    setPhoneNumber(e.target.value);
                  }}
                />
                <button
                  className="btn-square btn"
                  onClick={() => {
                    sendOtpMut.mutate({ phoneNumber });
                  }}
                >
                  Login
                </button>
              </label>
            </div>
          )}
          {sessionInfo && !token && (
            <div className="form-control">
              <label className="label">
                <span className="label-text">
                  Enter the OTP code you received in the text message
                </span>
              </label>
              <label className="input-group">
                <span>OTP Code</span>
                <input
                  type="text"
                  className="input-bordered input"
                  onChange={(e) => {
                    setOtpCode(e.target.value);
                  }}
                />
                <button
                  className="btn-square btn"
                  onClick={() => {
                    verifyOtpMut.mutate({
                      sessionInfo,
                      otpCode,
                    });
                    memoriesQuery.refetch();
                  }}
                >
                  Verify
                </button>
              </label>
            </div>
          )}
          {/* {token && (
            <div>
              <button
                onClick={() => {
                  refreshTokenMut.mutate({
                    refreshToken,
                  });
                }}
              >
                Refresh tokens
              </button>
            </div>
          )} */}
          {memoriesQuery.data && (
            <>
              <a className="btn" target="_blank" href={"/api/download/all?token="+token} rel="noreferrer">
                Download ALL
              </a>
              <div
                style={{ display: "flex", width: "100vw", flexWrap: "wrap" }}
              >
                {memoriesQuery.data.data.map((memory: any) => {
                  return (
                    <div
                      style={{ width: "100px", padding: "10px" }}
                      key={memory.id}
                    >
                      <img
                        src={memory.thumbnail.url}
                        style={{ width: "100%" }}
                      />
                    </div>
                  );
                })}
              </div>
            </>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
